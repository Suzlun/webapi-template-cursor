---
description: "Clean Architectureとレイヤー設計の規則"
globs: "**/internal/**/*.go,**/pkg/**/*.go,**/cmd/**/*.go"
alwaysApply: true
---
# Clean Architecture 設計規則

## Clean Architecture の実装

### レイヤー構成
```
┌─────────────────────────────────────┐
│           Handler Layer             │  ← HTTPリクエスト処理
├─────────────────────────────────────┤
│           Service Layer             │  ← ビジネスロジック
├─────────────────────────────────────┤
│          Repository Layer           │  ← データアクセス抽象化
├─────────────────────────────────────┤
│           Entity Layer              │  ← ドメインモデル
└─────────────────────────────────────┘
```

### 依存関係ルール
- 外側のレイヤーは内側のレイヤーに依存できる
- 内側のレイヤーは外側のレイヤーに依存してはいけない
- インターフェースを使用して依存関係を逆転させる

## Entity Layer（エンティティ層）

### ドメインモデル定義（ULID対応）
```go
// internal/domain/entity/user.go
package entity

import (
    "time"
    "gorm.io/gorm"
    "github.com/oklog/ulid/v2"
)

type User struct {
    ID        string         `gorm:"type:varchar(26);primaryKey" json:"id"`
    Name      string         `gorm:"not null" json:"name"`
    Email     string         `gorm:"uniqueIndex;not null" json:"email"`
    Password  string         `gorm:"not null" json:"-"`
    Role      UserRole       `gorm:"type:varchar(20);default:'user'" json:"role"`
    CreatedAt time.Time      `json:"created_at"`
    UpdatedAt time.Time      `json:"updated_at"`
    DeletedAt gorm.DeletedAt `gorm:"index" json:"-"`
    
    // リレーション（ULID対応）
    Posts []Post `gorm:"foreignKey:UserID" json:"posts,omitempty"`
}

type UserRole string

const (
    UserRoleAdmin UserRole = "admin"
    UserRoleUser  UserRole = "user"
)

// テーブル名の明示的指定
func (User) TableName() string {
    return "users"
}

// ULID自動生成
func (u *User) BeforeCreate(tx *gorm.DB) error {
    if u.ID == "" {
        u.ID = ulid.Make().String()
    }
    return nil
}

// ビジネスルール（ドメインロジック）
func (u *User) IsAdmin() bool {
    return u.Role == UserRoleAdmin
}

func (u *User) CanEdit(targetUser *User) bool {
    return u.IsAdmin() || u.ID == targetUser.ID
}
```

### バリューオブジェクト
```go
// internal/domain/entity/email.go
package entity

import (
    "fmt"
    "regexp"
)

type Email struct {
    value string
}

func NewEmail(email string) (*Email, error) {
    if !isValidEmail(email) {
        return nil, fmt.Errorf("invalid email format: %s", email)
    }
    return &Email{value: email}, nil
}

func (e Email) String() string {
    return e.value
}

func isValidEmail(email string) bool {
    pattern := `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`
    re := regexp.MustCompile(pattern)
    return re.MatchString(email)
}
```

## Repository Layer（リポジトリ層）

### リポジトリインターフェース（ULID対応）
```go
// internal/domain/repository/user_repository.go
package repository

import (
    "context"
    "webapi-template/internal/domain/entity"
)

type UserRepository interface {
    Create(ctx context.Context, user *entity.User) error
    FindByID(ctx context.Context, id string) (*entity.User, error)
    FindByEmail(ctx context.Context, email string) (*entity.User, error)
    FindAll(ctx context.Context, limit, offset int) ([]*entity.User, error)
    Update(ctx context.Context, user *entity.User) error
    Delete(ctx context.Context, id string) error
    Count(ctx context.Context) (int64, error)
}

type PostRepository interface {
    Create(ctx context.Context, post *entity.Post) error
    FindByID(ctx context.Context, id string) (*entity.Post, error)
    FindByUserID(ctx context.Context, userID string, limit, offset int) ([]*entity.Post, error)
    Update(ctx context.Context, post *entity.Post) error
    Delete(ctx context.Context, id string) error
}
```

### リポジトリ実装（ULID対応）
```go
// internal/infrastructure/database/user_repository_impl.go
package database

import (
    "context"
    "errors"
    "webapi-template/internal/domain/entity"
    "webapi-template/internal/domain/repository"
    "gorm.io/gorm"
)

type userRepository struct {
    db *gorm.DB
}

func NewUserRepository(db *gorm.DB) repository.UserRepository {
    return &userRepository{db: db}
}

func (r *userRepository) Create(ctx context.Context, user *entity.User) error {
    return r.db.WithContext(ctx).Create(user).Error
}

func (r *userRepository) FindByID(ctx context.Context, id string) (*entity.User, error) {
    var user entity.User
    err := r.db.WithContext(ctx).Where("id = ?", id).First(&user).Error
    if err != nil {
        if errors.Is(err, gorm.ErrRecordNotFound) {
            return nil, &AppError{
                Code:    "USER_NOT_FOUND",
                Message: "User not found",
                Err:     err,
            }
        }
        return nil, err
    }
    return &user, nil
}

func (r *userRepository) FindByEmail(ctx context.Context, email string) (*entity.User, error) {
    var user entity.User
    err := r.db.WithContext(ctx).Where("email = ?", email).First(&user).Error
    if err != nil {
        if errors.Is(err, gorm.ErrRecordNotFound) {
            return nil, &AppError{
                Code:    "USER_NOT_FOUND",
                Message: "User not found",
                Err:     err,
            }
        }
        return nil, err
    }
    return &user, nil
}
```

## Service Layer（サービス層）

### サービスインターフェース（ULID対応）
```go
// internal/usecase/user_service.go
package usecase

import (
    "context"
    "webapi-template/internal/domain/entity"
)

type UserService interface {
    CreateUser(ctx context.Context, req CreateUserRequest) (*entity.User, error)
    GetUser(ctx context.Context, id string) (*entity.User, error)
    GetUsers(ctx context.Context, limit, offset int) ([]*entity.User, int64, error)
    UpdateUser(ctx context.Context, id string, req UpdateUserRequest) (*entity.User, error)
    DeleteUser(ctx context.Context, id string) error
    AuthenticateUser(ctx context.Context, email, password string) (*entity.User, error)
}

type CreateUserRequest struct {
    Name     string `json:"name" validate:"required,min=1,max=100"`
    Email    string `json:"email" validate:"required,email"`
    Password string `json:"password" validate:"required,min=8"`
}

type UpdateUserRequest struct {
    Name  *string `json:"name,omitempty" validate:"omitempty,min=1,max=100"`
    Email *string `json:"email,omitempty" validate:"omitempty,email"`
}
```

### サービス実装
```go
// internal/usecase/user_service_impl.go
package usecase

import (
    "context"
    "fmt"
    "webapi-template/internal/domain/entity"
    "webapi-template/internal/domain/repository"
    "webapi-template/pkg/logger"
    "webapi-template/pkg/password"
)

type userService struct {
    userRepo repository.UserRepository
    logger   logger.Logger
}

func NewUserService(userRepo repository.UserRepository, logger logger.Logger) UserService {
    return &userService{
        userRepo: userRepo,
        logger:   logger,
    }
}

func (s *userService) CreateUser(ctx context.Context, req CreateUserRequest) (*entity.User, error) {
    // バリデーション
    if err := s.validateCreateUserRequest(req); err != nil {
        return nil, err
    }

    // 重複チェック
    existingUser, err := s.userRepo.FindByEmail(ctx, req.Email)
    if err == nil && existingUser != nil {
        return nil, &AppError{
            Code:    "EMAIL_ALREADY_EXISTS",
            Message: "Email already exists",
        }
    }

    // パスワードハッシュ化
    hashedPassword, err := password.HashPassword(req.Password)
    if err != nil {
        s.logger.Error("Failed to hash password", "error", err)
        return nil, fmt.Errorf("failed to process password: %w", err)
    }

    // ユーザー作成
    user := &entity.User{
        Name:     req.Name,
        Email:    req.Email,
        Password: hashedPassword,
        Role:     entity.UserRoleUser,
    }

    if err := s.userRepo.Create(ctx, user); err != nil {
        s.logger.Error("Failed to create user", "error", err, "email", req.Email)
        return nil, fmt.Errorf("failed to create user: %w", err)
    }

    s.logger.Info("User created successfully", "user_id", user.ID, "email", user.Email)
    return user, nil
}

func (s *userService) validateCreateUserRequest(req CreateUserRequest) error {
    if req.Name == "" {
        return &AppError{
            Code:    "VALIDATION_ERROR",
            Message: "Name is required",
        }
    }
    if req.Email == "" {
        return &AppError{
            Code:    "VALIDATION_ERROR",
            Message: "Email is required",
        }
    }
    if len(req.Password) < 8 {
        return &AppError{
            Code:    "VALIDATION_ERROR",
            Message: "Password must be at least 8 characters",
        }
    }
    return nil
}
```

## Handler Layer（ハンドラー層）

### ハンドラー実装
```go
// internal/handler/user_handler.go
package handler

import (
    "net/http"
    "strconv"
    "webapi-template/internal/usecase"
    "webapi-template/pkg/logger"
    "github.com/gin-gonic/gin"
)

type UserHandler struct {
    userService usecase.UserService
    logger      logger.Logger
}

func NewUserHandler(userService usecase.UserService, logger logger.Logger) *UserHandler {
    return &UserHandler{
        userService: userService,
        logger:      logger,
    }
}

func (h *UserHandler) CreateUser(c *gin.Context) {
    var req usecase.CreateUserRequest
    if err := c.ShouldBindJSON(&req); err != nil {
        h.logger.Error("Invalid request format", "error", err)
        c.JSON(http.StatusBadRequest, ErrorResponse{
            Error: "Invalid request format",
            Code:  "INVALID_REQUEST",
        })
        return
    }

    user, err := h.userService.CreateUser(c.Request.Context(), req)
    if err != nil {
        h.handleError(c, err)
        return
    }

    c.JSON(http.StatusCreated, SuccessResponse{
        Data:    user,
        Message: "User created successfully",
    })
}
```

## Dependency Injection（依存性注入）

### DIコンテナ
```go
// internal/infrastructure/container/container.go
package container

import (
    "webapi-template/internal/handler"
    "webapi-template/internal/infrastructure/database"
    "webapi-template/internal/usecase"
    "webapi-template/pkg/logger"
    "gorm.io/gorm"
)

type Container struct {
    // Handlers
    UserHandler *handler.UserHandler
    
    // Services
    UserService usecase.UserService
    
    // Repositories
    UserRepository repository.UserRepository
    
    // Infrastructure
    DB     *gorm.DB
    Logger logger.Logger
}

func NewContainer(db *gorm.DB, logger logger.Logger) *Container {
    // Repositories
    userRepo := database.NewUserRepository(db)
    
    // Services
    userService := usecase.NewUserService(userRepo, logger)
    
    // Handlers
    userHandler := handler.NewUserHandler(userService, logger)
    
    return &Container{
        UserHandler:    userHandler,
        UserService:    userService,
        UserRepository: userRepo,
        DB:             db,
        Logger:         logger,
    }
}
```

### Wire による自動生成（オプション）
```go
// +build wireinject

package container

import (
    "webapi-template/internal/handler"
    "webapi-template/internal/infrastructure/database"
    "webapi-template/internal/usecase"
    "github.com/google/wire"
    "gorm.io/gorm"
)

var ProviderSet = wire.NewSet(
    database.NewUserRepository,
    usecase.NewUserService,
    handler.NewUserHandler,
)

func InitializeContainer(db *gorm.DB, logger logger.Logger) *Container {
    wire.Build(ProviderSet)
    return &Container{}
}
```

## トランザクション管理

### トランザクション実装
```go
// pkg/transaction/transaction.go
package transaction

import (
    "context"
    "gorm.io/gorm"
)

type TxManager interface {
    RunInTransaction(ctx context.Context, fn func(ctx context.Context) error) error
}

type txManager struct {
    db *gorm.DB
}

func NewTxManager(db *gorm.DB) TxManager {
    return &txManager{db: db}
}

func (tm *txManager) RunInTransaction(ctx context.Context, fn func(ctx context.Context) error) error {
    return tm.db.WithContext(ctx).Transaction(func(tx *gorm.DB) error {
        // トランザクション用のコンテキストを作成
        txCtx := context.WithValue(ctx, "tx", tx)
        return fn(txCtx)
    })
}

// サービスでの使用例
func (s *userService) CreateUserWithProfile(ctx context.Context, req CreateUserWithProfileRequest) error {
    return s.txManager.RunInTransaction(ctx, func(txCtx context.Context) error {
        user, err := s.userRepo.Create(txCtx, &entity.User{
            Name:  req.Name,
            Email: req.Email,
        })
        if err != nil {
            return err
        }
        
        profile := &entity.Profile{
            UserID: user.ID,
            Bio:    req.Bio,
        }
        return s.profileRepo.Create(txCtx, profile)
    })
}
```

## アーキテクチャ アンチパターン対策

### God Object（神オブジェクト）の回避

#### ❌ Bad: 巨大すぎるオブジェクト
```go
// Bad: すべての責任を持つ巨大なサービス
type UserManager struct {
    db    *gorm.DB
    cache *redis.Client
    email EmailSender
    sms   SMSSender
    auth  AuthProvider
}

// 700行以上のメソッドが並ぶ...
func (um *UserManager) CreateUser(req CreateUserRequest) (*User, error) {
    // ユーザー作成
    // 認証処理
    // メール送信
    // SMS送信
    // キャッシュ更新
    // ログ記録
    // 統計更新
    // 通知送信
    // ... 数百行のコード
}

func (um *UserManager) UpdateUser(id string, req UpdateUserRequest) (*User, error) {
    // 同様に数百行...
}

func (um *UserManager) DeleteUser(id string) error {
    // 同様に数百行...
}

// その他50個以上のメソッド...
```

#### ✅ Good: 単一責任の分離
```go
// Good: 責任を分離した小さなサービス
type UserService interface {
    CreateUser(ctx context.Context, req CreateUserRequest) (*entity.User, error)
    UpdateUser(ctx context.Context, id string, req UpdateUserRequest) (*entity.User, error)
    GetUser(ctx context.Context, id string) (*entity.User, error)
    DeleteUser(ctx context.Context, id string) error
}

type userService struct {
    userRepo      repository.UserRepository
    emailService  EmailService
    cacheService  CacheService
    eventPublisher EventPublisher
}

func (s *userService) CreateUser(ctx context.Context, req CreateUserRequest) (*entity.User, error) {
    // バリデーション
    if err := s.validateCreateUserRequest(req); err != nil {
        return nil, err
    }
    
    // ユーザー作成（単一責任）
    user := &entity.User{
        Name:  req.Name,
        Email: req.Email,
    }
    
    err := s.userRepo.Create(ctx, user)
    if err != nil {
        return nil, fmt.Errorf("failed to create user: %w", err)
    }
    
    // イベント発行（他の処理は非同期）
    s.eventPublisher.Publish(ctx, &UserCreatedEvent{
        UserID: user.ID,
        Email:  user.Email,
    })
    
    return user, nil
}

// 分離されたメール送信サービス
type EmailService interface {
    SendWelcomeEmail(ctx context.Context, email string) error
}

// 分離されたイベント処理
type UserEventHandler struct {
    emailService EmailService
    smsService   SMSService
}

func (h *UserEventHandler) HandleUserCreated(ctx context.Context, event *UserCreatedEvent) error {
    // 非同期でメール送信
    go h.emailService.SendWelcomeEmail(ctx, event.Email)
    return nil
}
```

### 循環依存（Circular Dependencies）の回避

#### ❌ Bad: 循環依存の発生
```go
// Bad: パッケージ間の循環依存
// package user
import "myapp/order"

type UserService struct {
    orderService order.OrderService // userパッケージがorderパッケージに依存
}

// package order  
import "myapp/user"

type OrderService struct {
    userService user.UserService // orderパッケージがuserパッケージに依存
}
// → 循環依存が発生
```

#### ✅ Good: 依存関係の逆転
```go
// Good: インターフェースによる依存関係逆転
// package domain (上位層)
type UserRepository interface {
    FindByID(ctx context.Context, id string) (*User, error)
    Create(ctx context.Context, user *User) error
}

type OrderRepository interface {
    FindByUserID(ctx context.Context, userID string) ([]*Order, error)
    Create(ctx context.Context, order *Order) error
}

// package usecase (上位層)
type UserService struct {
    userRepo  domain.UserRepository
    orderRepo domain.OrderRepository // インターフェースに依存
}

type OrderService struct {
    orderRepo domain.OrderRepository
    userRepo  domain.UserRepository  // インターフェースに依存
}

// package infrastructure (下位層)
type userRepository struct {
    db *gorm.DB
}

func (r *userRepository) FindByID(ctx context.Context, id string) (*domain.User, error) {
    // 実装
}

type orderRepository struct {
    db *gorm.DB
}

func (r *orderRepository) FindByUserID(ctx context.Context, userID string) ([]*domain.Order, error) {
    // 実装
}
```

### 密結合（Tight Coupling）の回避

#### ❌ Bad: 密結合の実装
```go
// Bad: 具体的なクラスに直接依存
type UserService struct {
    db    *sql.DB           // データベースの具体的な実装に依存
    redis *redis.Client    // Redisの具体的な実装に依存
    smtp  *smtp.Client     // SMTPの具体的な実装に依存
}

func (s *UserService) CreateUser(req CreateUserRequest) (*User, error) {
    // 直接SQLを書く（データベースに密結合）
    query := "INSERT INTO users (name, email) VALUES ($1, $2) RETURNING id"
    var userID int
    err := s.db.QueryRow(query, req.Name, req.Email).Scan(&userID)
    if err != nil {
        return nil, err
    }
    
    // 直接Redisコマンドを使用（Redisに密結合）
    userJSON, _ := json.Marshal(&User{ID: userID, Name: req.Name, Email: req.Email})
    s.redis.Set(fmt.Sprintf("user:%d", userID), userJSON, time.Hour)
    
    // 直接SMTP操作（メール送信に密結合）
    msg := fmt.Sprintf("Subject: Welcome\n\nHello %s", req.Name)
    s.smtp.Mail("noreply@example.com")
    s.smtp.Rcpt(req.Email)
    s.smtp.Data()
    s.smtp.Write([]byte(msg))
    
    return &User{ID: userID, Name: req.Name, Email: req.Email}, nil
}
```

#### ✅ Good: 疎結合の実装
```go
// Good: インターフェースによる疎結合
type UserService struct {
    userRepo     UserRepository  // インターフェースに依存
    cacheService CacheService    // インターフェースに依存
    emailService EmailService    // インターフェースに依存
}

type UserRepository interface {
    Create(ctx context.Context, user *entity.User) error
    FindByID(ctx context.Context, id string) (*entity.User, error)
}

type CacheService interface {
    Set(ctx context.Context, key string, value interface{}, expiration time.Duration) error
    Get(ctx context.Context, key string, dest interface{}) error
}

type EmailService interface {
    SendWelcomeEmail(ctx context.Context, email, name string) error
}

func (s *UserService) CreateUser(ctx context.Context, req CreateUserRequest) (*entity.User, error) {
    user := &entity.User{
        Name:  req.Name,
        Email: req.Email,
    }
    
    // リポジトリを通じてデータ操作（疎結合）
    err := s.userRepo.Create(ctx, user)
    if err != nil {
        return nil, fmt.Errorf("failed to create user: %w", err)
    }
    
    // キャッシュサービスを通じてキャッシュ操作（疎結合）
    cacheKey := fmt.Sprintf("user:%d", user.ID)
    s.cacheService.Set(ctx, cacheKey, user, time.Hour)
    
    // メールサービスを通じてメール送信（疎結合）
    go s.emailService.SendWelcomeEmail(ctx, user.Email, user.Name)
    
    return user, nil
}
```

### 貧血ドメインモデル（Anemic Domain Model）の回避

#### ❌ Bad: 貧血ドメインモデル
```go
// Bad: ロジックのないデータ構造
type User struct {
    ID       string    `json:"id"`
    Name     string    `json:"name"`
    Email    string    `json:"email"`
    Status   string    `json:"status"`
    Birthday time.Time `json:"birthday"`
    // ゲッターとセッターのみ、ビジネスロジックなし
}

// ビジネスロジックがサービス層に集中
type UserService struct {
    userRepo UserRepository
}

func (s *UserService) DeactivateUser(ctx context.Context, userID string) error {
    user, err := s.userRepo.FindByID(ctx, userID)
    if err != nil {
        return err
    }
    
    // ビジネスルールがサービス層に散在
    if user.Status == "inactive" {
        return errors.New("user already inactive")
    }
    
    if time.Since(user.Birthday).Hours() < 24*365*18 { // 18歳未満
        return errors.New("cannot deactivate minor")
    }
    
    user.Status = "inactive"
    return s.userRepo.Update(ctx, user)
}
```

#### ✅ Good: リッチドメインモデル
```go
// Good: ビジネスロジックを持つドメインモデル
type User struct {
    id       string
    name     string
    email    string
    status   UserStatus
    birthday time.Time
}

type UserStatus string

const (
    UserStatusActive   UserStatus = "active"
    UserStatusInactive UserStatus = "inactive"
    UserStatusSuspended UserStatus = "suspended"
)

// ドメインロジックをモデル内に配置
func (u *User) Deactivate() error {
    if u.status == UserStatusInactive {
        return &DomainError{
            Code:    "USER_ALREADY_INACTIVE",
            Message: "User is already inactive",
        }
    }
    
    if u.isMinor() {
        return &DomainError{
            Code:    "CANNOT_DEACTIVATE_MINOR",
            Message: "Cannot deactivate user under 18",
        }
    }
    
    u.status = UserStatusInactive
    return nil
}

func (u *User) isMinor() bool {
    age := time.Since(u.birthday).Hours() / (24 * 365)
    return age < 18
}

func (u *User) CanCreatePost() bool {
    return u.status == UserStatusActive
}

func (u *User) GetDisplayName() string {
    if u.name == "" {
        return "Anonymous User"
    }
    return u.name
}

// サービス層はドメインロジックを呼び出すのみ
type UserService struct {
    userRepo UserRepository
}

func (s *UserService) DeactivateUser(ctx context.Context, userID string) error {
    user, err := s.userRepo.FindByID(ctx, userID)
    if err != nil {
        return err
    }
    
    // ドメインロジックに委譲
    if err := user.Deactivate(); err != nil {
        return err
    }
    
    return s.userRepo.Update(ctx, user)
}
```

### Big Ball of Mud（スパゲッティコード）の回避

#### ❌ Bad: 構造化されていないコード
```go
// Bad: 構造がないファイル配置
// main.go に全てのコードが詰め込まれている
package main

import (
    "database/sql"
    "encoding/json"
    "net/http"
    // ... 数十のimport
)

var db *sql.DB
var cache map[string]interface{}

func main() {
    // データベース接続
    db, _ = sql.Open("postgres", "...")
    
    // ルーティング
    http.HandleFunc("/users", handleUsers)
    http.HandleFunc("/posts", handlePosts)
    http.HandleFunc("/comments", handleComments)
    // ... 数十のハンドラー
    
    http.ListenAndServe(":8080", nil)
}

// 1000行以上の巨大なハンドラー関数
func handleUsers(w http.ResponseWriter, r *http.Request) {
    switch r.Method {
    case "GET":
        // 500行のGETロジック
        // SQL文が直接書かれている
        // ビジネスロジックが混在
        // エラーハンドリングが統一されていない
    case "POST":
        // 500行のPOSTロジック
        // バリデーション、DB操作、メール送信が混在
    case "PUT":
        // 500行のPUTロジック
    case "DELETE":
        // 500行のDELETEロジック
    }
}
```

#### ✅ Good: レイヤー化された構造
```go
// Good: 適切なディレクトリ構造とレイヤー分離
// cmd/server/main.go
package main

import (
    "webapi-template/internal/di"
    "webapi-template/internal/server"
)

func main() {
    container := di.NewContainer()
    srv := server.NewServer(container)
    srv.Run()
}

// internal/handler/user_handler.go
package handler

type UserHandler struct {
    userService usecase.UserService
    logger      logger.Logger
}

func (h *UserHandler) CreateUser(c *gin.Context) {
    var req usecase.CreateUserRequest
    if err := c.ShouldBindJSON(&req); err != nil {
        h.handleValidationError(c, err)
        return
    }
    
    user, err := h.userService.CreateUser(c.Request.Context(), req)
    if err != nil {
        h.handleError(c, err)
        return
    }
    
    c.JSON(http.StatusCreated, user)
}

// internal/usecase/user_service.go
package usecase

type userService struct {
    userRepo repository.UserRepository
    logger   logger.Logger
}

func (s *userService) CreateUser(ctx context.Context, req CreateUserRequest) (*entity.User, error) {
    user := &entity.User{
        Name:  req.Name,
        Email: req.Email,
    }
    
    if err := user.Validate(); err != nil {
        return nil, err
    }
    
    return s.userRepo.Create(ctx, user)
}

// internal/infrastructure/database/user_repository.go
package database

type userRepository struct {
    db *gorm.DB
}

func (r *userRepository) Create(ctx context.Context, user *entity.User) error {
    return r.db.WithContext(ctx).Create(user).Error
}
```

// ... existing code ...

